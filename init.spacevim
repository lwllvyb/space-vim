" File  : /Users/liwenlong/.spacevim
" Author: liwenlong <liwenlong03@meituan.com>
" Date  : 03/15/2018
" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
" let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
			\ 'fzf', 'unite', 'better-defaults',
			\ 'which-key', 'airline',
			\ ]

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim_gui
"   Layer 'airline'
" endif

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()

	" Add plugin via Plug command.
	" Install personal plugins
	Plug 'airblade/vim-rooter'
	Plug 'tacahiroy/ctrlp-funky'
	Plug 'scrooloose/nerdtree'
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	Plug 'rking/ag.vim'
	Plug 'scrooloose/nerdcommenter'
	Plug 'milkypostman/vim-togglelist'
	Plug 'yssl/QFEnter'
	Plug 'jistr/vim-nerdtree-tabs'
	Plug 'Xuyuanp/nerdtree-git-plugin'
	Plug 'airblade/vim-gitgutter'
	Plug 'jiangmiao/auto-pairs'
	Plug 'Lokaltog/vim-easymotion'
	Plug 'flazz/vim-colorschemes'
	Plug 'lwllvyb/vim-header'
	Plug 'davidhalter/jedi-vim'
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'w0rp/ale'
	Plug 'ervandew/supertab'
	Plug 'sbdchd/neoformat'
	Plug 'devjoe/vim-codequery'
	Plug 'Yggdroot/LeaderF'
	Plug 'jremmen/vim-ripgrep'
	Plug 'skywind3000/asyncrun.vim'
endfunction

" Override the default settings as well as adding extras
function! UserConfig()

	" If you have installed the powerline fonts and want to enable airline layer
	" let g:airline_powerline_fonts=1

	" Use gui colors in terminal if available
	if has('termguicolors')
		set termguicolors
		if g:spacevim_tmux
			" If use vim inside tmux, see https://github.com/vim/vim/issues/993
			" set Vim-specific sequences for RGB colors
			let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
			let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
		endif
	endif
	" vim-rooter
	let g:rooter_patterns = ['.git/']
	let g:rooter_resolve_links = 1
	let g:rooter_silent_chdir = 0

	noremap <leader>ff :Files<cr>
	"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" cscope setting
	"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	if has("cscope")
		if has("unix")
			set csprg=/usr/bin/cscope
		endif
		if has("macunix")
			set csprg=/usr/local/bin/cscope
		endif

		set csto=1
		set cst
		set nocsverb
		if has('quickfix')
			set cscopequickfix=s-,c-,d-,i-,t-,e-,a-
		endif
		" add any database in current directory
		if filereadable("cscope.out")
			cs add cscope.out
		endif
		set csverb
	endif

	" nmap <leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
	nmap <leader>fd :lcs find g <C-R>=expand("<cword>")<CR><CR>
	nmap <leader>fr :cs find c <C-R>=expand("<cword>")<CR><CR>
	" nmap <leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
	" nmap <leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
	" nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
	" nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
	" nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

	" auto update cscope databases
	nmap <F2> :!find . -iname '*.c' -o -iname '*.cpp' -o -iname '*.cc' -o -iname '*.h' -o -iname '*.hpp' > cscope.files<CR>
				\:!cscope -b -i cscope.files -f cscope.out<CR>
				\:cs add cscope.out<CR>
				\:cs reset<CR>

	" nerdcommenter
	" Add spaces after comment delimiters by default
	let g:NERDSpaceDelims = 1
	" Use compact syntax for prettified multi-line comments
	let g:NERDCompactSexyComs = 1
	" Align line-wise comment delimiters flush left instead of following code indentation
	let g:NERDDefaultAlign = 'left'
	" Set a language to use its alternate delimiters by default
	let g:NERDAltDelims_java = 1
	" Add your own custom formats or override the defaults
	let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
	" Allow commenting and inverting empty lines (useful when commenting a region)
	let g:NERDCommentEmptyLines = 1
	" Enable trimming of trailing whitespace when uncommenting
	let g:NERDTrimTrailingWhitespace = 1

	" open quickfix on the left of window {
	nmap <leader>eo :call ToggleQuickfixList()<CR>
	nmap <leader>en :cnext<CR>
	nmap <leader>ep :cprev<CR>
	" open the error line num
	nmap <leader>em :cc
	"} open quickfix on the left of window

	" jistr/vim-nerdtree-tabs
	map <Leader>n :NERDTreeTabsToggle<CR>
	" 显示行号
	let NERDTreeShowLineNumbers=1
	let NERDTreeAutoCenter=1
	" 是否显示隐藏文件
	let NERDTreeShowHidden=1
	" 设置宽度
	let NERDTreeWinSize=31
	" 在终端启动vim时，共享NERDTree
	let g:nerdtree_tabs_open_on_gui_startup=0
	let g:nerdtree_tabs_open_on_console_startup=0
	" 忽略一下文件的显示
	let NERDTreeIgnore=['\.pyc','\~$','\.swp']
	" 显示书签列表
	let NERDTreeShowBookmarks=1

	let g:NERDTreeIndicatorMapCustom = {
				\ "Modified"  : "✹",
				\ "Staged"    : "✚",
				\ "Untracked" : "✭",
				\ "Renamed"   : "➜",
				\ "Unmerged"  : "═",
				\ "Deleted"   : "✖",
				\ "Dirty"     : "✗",
				\ "Clean"     : "✔︎",
				\ 'Ignored'   : '☒',
				\ "Unknown"   : "?"
				\ }
	" ------------------------------- basic start ------------------------------

	set tabstop=4
	set softtabstop=0 noexpandtab
	set shiftwidth=4

	" tab 切换为 space
	" set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
	" ------------------------------- basic  end ------------------------------


	" 配置状态栏 airline
	if !exists('g:airline_symbols')
		let g:airline_symbols = {}
	endif
	let g:airline_left_sep = '▶'
	let g:airline_left_alt_sep = '❯'
	let g:airline_right_sep = '◀'
	let g:airline_right_alt_sep = '❮'
	let g:airline_symbols.linenr = '¶'
	let g:airline_symbols.branch = '⎇'

	" 是否打开tabline
	" let g:airline#extensions#tabline#enabled = 1

	" 配置主题 colorscheme
	" colorscheme molokai

	" 快速跳转 easymotion
	" <leader> <leader> w 触发
	" vim-header
	let g:header_auto_add_header = 0
	let g:header_field_author = 'liwenlong'
	let g:header_field_author_email = 'liwenlong03@meituan.com'
	let g:header_field_modified_timestamp = 0
	let g:header_field_modified_by = 0
	let g:header_field_timestamp_format = '%m/%d/%Y'
	map <leader>ah :AddHeader<CR>

	" sbdchd/neoformat
	let g:neoformat_enabled_python = ['pep8','yapf']
	" 默认情况下
	" Enable alignment
	let g:neoformat_basic_format_align = 1
	" Enable tab to spaces conversion
	let g:neoformat_basic_format_retab = 1
	" Enable trimmming of trailing whitespace
	let g:neoformat_basic_format_trim = 1
	" Run all enabled formatters (by default Neoformat stops after the first formatter succeeds)
	let g:neoformat_run_all_formatters = 1
	" When debugging, you can enable either of following variables for extra logging.
	let g:neoformat_only_msg_on_error = 1
	" run a formatter on save
	augroup fmt
		autocmd!
		autocmd BufWritePre * undojoin | Neoformat
	augroup END


	" jedi-vim
	let g:jedi#force_py_version = 3

	" w0rp/ale
	let g:ale_fixers = {
				\"python":["yapf",],
				\}
	let g:ale_sign_error = 'E'
	let g:ale_sign_warning = 'W'
	" Set this. Airline will handle the rest.
	let g:airline#extensions#ale#enabled = 1
	" Write this in your vimrc file
	let g:ale_set_loclist = 1
	let g:ale_set_quickfix = 0
	let g:ale_open_list = 0
	let g:ale_keep_list_window_open = 0

	" kywind3000/asyncrun.vim {
	let g:asyncrun_open = 10
	" }
	" ripgrep -- asyncrun.vim {
	" noremap <F3> :AsyncRun! rg --vimgrep --glob '*.{c,cpp,h}' --glob '!{contrib,build,CMakeFiles}' -w <cword> <cr>

	noremap <leader>sc :AsyncRun! rg --vimgrep --glob '*.{c,cpp,h}' --glob '!{contrib,build,CMakeFiles}' -w <cword> <cr>
	noremap <leader>sp :AsyncRun! rg --vimgrep --glob '*.{py}' --glob '!{contrib,build,CMakeFiles}' -w <cword> <cr>
	noremap <leader>sg :AsyncRun! rg --vimgrep --glob '*.{go}' --glob '!{contrib,build,CMakeFiles}' -w <cword> <cr>
	" }

endfunction
